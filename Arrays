
//************************************************8
//L004
//max conscutive ones
 public int findMaxConsecutiveOnes(int[] nums) {
        int c = 0;
        int ans = 0;
        for(int i = 0; i<nums.length; i++){
            if(nums[i] == 1) {
                c++;
            } else {
                if(c>ans){
                    ans = c;
                }
                c = 0;
            }
            
        }
        if(c > ans) ans = c;
        
        return ans;
    }

//Remove Duplicates from Sorted Array
 public int removeDuplicates(int[] nums) {
        int j = 1;
        for(int i = 1; i<nums.length; i++){
            if(nums[i] != nums[i-1]){
                nums[j] = nums[i];
                j++;
            }
            
        }
      return j;  
    }

//sum of two array
 public static void main(String[] args) {
        int[] a1 = {9,8,7,2,9,5};
        int[] a2 = {5,4,5,9};
        int n1 = a1.length , n2 = a2.length;
        int s = 0;
        if(n1>n2) s = n1+1;
        else s = n2+1;
        int[] ans = new int[s];
        int i = n1-1, j = n2-1, k = s-1;
        int carry = 0;
        while(i>=0 || j>=0 || carry>0){
          int sum = 0;
          sum = sum + carry;
          if(i>=0){
            sum = sum + a1[i];
          }
          if(j>=0){
            sum = sum + a2[j];
          }
          ans[k] = sum%10;
          carry = sum/10;
          i--;
          j--;
          k--;
        }
        if(ans[0] > 0) System.out.print(ans[0] + " ");
        for(i = 1; i<s; i++) System.out.print(ans[i] + " ");

    }

// maximum product of three number
public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        int min1 = nums[0], min2 = nums[1];
        int max1 = nums[n-1] , max2 = nums[n-2] , max3 = nums[n-3];
        int ans1 = min1 * min2 * max1; 
        int ans2 = max1 * max2 * max3;
        
        if(ans1 > ans2) return ans1;
        else return ans2;
    }


